// .outerHTML 



// Читаем и заменяем HTML-элемент и всё его содержание на новое.





/* Кратко 

    Свойство outerHTML позволяет получить HTML-элемент, включая его содержимое, 
    в виде HTML-строки или заменить элемент на новый HTML.


    Новое значение HTML передаётся в виде строки и оно полностью заменит весь элемент. 
    В outerHTML нельзя передать DOM-элемент, только строку.

*/ 




// Пример:

/* HTML - 

    <section>
        <h1>Введение</h1>
        <p>Параграф с текстом</p>
        <p>Второй параграф с текстом</p>
    </section>

*/ 


const section = document.querySelector('section')

console.log(section.outerHTML)


// Теперь заменим старое содержимое новым HTML:

section.outerHTML = '<h2>Второй заголовок</h2>'


// HTML после изменения:


/* <h2>Второй заголовок</h2> */












/* Как понять

    Свойство outerHTML проще понять в сравнении с другим похожим свойством – innerHTML.


    Свойство innerHTML позволяет получить только содержимое элемента как HTML-строку. В то время 
    как outerHTML делает то же самое, но при этом возвращает и HTML самого элемента. Можно сказать, 
    что вывод будет идентичен innerHTML, только в строке будет содержаться открывающий и закрывающий 
    тег самого элемента, у которого было вызвано свойство.


    Так же как и innerHTML, если в outerHTML присвоить новое значение, то это приводит к 
    перерисовке страницы.

*/ 






/* Как пишется

    Обращение к свойству outerHTML вернёт элемент и его содержимое виде HTML-строки. 
    Просмотреть можно любой элемент, но изменить можно любой, кроме <html>.



    Присвоение нового значения к свойству полностью удалит элемент и заменит его новым HTML:

*/ 



/* <header>Название сайта</header> */




const header = document.querySelector('header')

header.outerHTML = '<span class="logo">LOGO</span>'

console.log(header.outerHTML)



// Новый элемент полностью заменит <header>.



/* ☝️ Браузер позволит присвоить 

    новое значение outerHTML в <body>, но не удалит сам элемент. Вместо этого 
    новое значение будет вставлено внутрь <body>, аналогично вызову innerHTML.
    
*/ 



/* <body> остался на странице, 

    а новое значение стало содержимым элемента.

    Если попробовать изменить outerHTML у <html>, то браузер выбросит ошибку.
    
*/ 




try {
    const html = document.querySelector('html')

    html.outerHTML = '<div>Я новый HTML</div>'
} catch(error) {
    console.log(error)
    console.log(error.name)
    console.log(error.type)
}